#cloud-config


# This is only a template. Use update_cloud_config_pxe.sh to create the actual config file from this template. This template
# requires ssh_authorized_keys , discovery_token and name of the network interface.

# This is a two-stage config. The first stage extracts private and public IP address from ifconfig command and writes it to /etc/environment, 
# the second stage does the usual cloud config stuff.
# Initial version was from https://github.com/coreos/coreos-cloudinit/issues/205#ref-issue-45810587


ssh_authorized_keys:
%ssh_authorized_keys%

write_files:
    - path: /home/core/.bash_profile
      owner: core:core
      permissions: 0755
      content: |
      # /etc/skel/.bash_profile
      # MLN
      # This file is sourced by bash for login shells.  The following line
      # runs your .bashrc and is recommended by the bash info pages.
      [[ -f ~/.bashrc ]] && . ~/.bashrc
      #
      # if a shelll 
      #
      if  test -t 0 ; then
         # interactive shell
     	    export TERM="xterm-256color"
       	     export CLICOLOR=1
             set -o vi
             BO='[1m'
             BOFF='[m'
             PROMPT_COMMAND='[\t] ${BO}\h${BOFF}:\w \n$?>'
      fi
      #	     
      # set aliases
      #
      if [ -f ~/.aliases ]; then
         . ~/.aliases
      fi
    - path: /home/core/.aliases
      owner: core:core
      permissions: 0755
      content: |
      #
      # customize for self
      #
      alias la='ls -laF'
      alias ll='ls -laF'
    - path: /run/cloud-config.yaml
      permissions: '0644'
      content: |
        #cloud-config
        # This is the second stage
        coreos:
            update:
                reboot-strategy: etcd-lock
            etcd2:
                # name this is required because pxe-booting would create new ETCD instance names on boot.
                name: $ETCD_NAME
                # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
                discovery: "https://discovery.etcd.io/%discovery_token%"
                # multi-region and multi-cloud deployments need to use $public_ipv4
                advertise-client-urls: "http://$public_ipv4:2379"
                initial-advertise-peer-urls: "http://$private_ipv4:2380"
                # listen on both the official ports and the legacy ports
                # legacy ports can be omitted if your application doesn't depend on them
                listen-client-urls: "http://0.0.0.0:2379,http://0.0.0.0:4001"
                listen-peer-urls: "http://$private_ipv4:2380,http://$private_ipv4:7001"
            fleet:
                public-ip: $_public_ipv4
                # etcd-request-timeout: 15
                metadata: $METADATA
            units:
                - name: settimezone.service
                  command: start
                  content: |
                    [Unit]
                    Description=Set the timezone
                    [Service]
                    ExecStart=/usr/bin/timedatectl set-timezone America/Chicago
                    RemainAfterExit=yes
                    Type=oneshot
                - name: format-swap.service
                  command: start
                  content: |
                    [Unit]
                    Description=Activates swap partition
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    ExecStart=/usr/sbin/swapon /dev/${RAID_DEVICE}p1
                - name: create_docker_directories.service
                  command: start
                  content: |
                    [Unit]
                    Description=Create docker directories on /media/ephemeral
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    ExecStart=/usr/bin/mkdir -p /media/ephemeral/docker/ /media/ephemeral/tmp/
                    ExecStart=/usr/bin/chmod 1777 /media/ephemeral/tmp/
                - name: create_tmp.service
                  command: start
                  content: |
                    [Unit]
                    Description=Create /media/ephemeral/tmp/
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    ExecStart=/usr/bin/umount /tmp
                    ExecStart=/usr/bin/rm -rf /tmp/
                    ExecStart=/usr/bin/ln -s /media/ephemeral/tmp/ /tmp
                - name: docker.service
                  drop-ins:
                    - name: 50-docker-location.conf
                      content: |
                        [Unit]
                        Requires=create_docker_directories.service
                        After=create_docker_directories.service
                        [Service]
                        Environment='TMPDIR=/media/ephemeral/tmp/'
                        Environment='DOCKER_OPTS="-g=/media/ephemeral/docker"'
                - name: etcd2.service
                  command: start
                - name: fleet.service
                  command: start
                - name: skycore.service
                  command: start
                  content: |
                   [Unit]
                   Description=skycore binary

                   [Service]
                   Type=oneshot
                   ExecStart=/usr/bin/rm -f /home/core/skycore
                   ExecStart=/usr/bin/wget --tries=10 --wait=3 --random-wait --retry-connrefused https://github.com/wgerlach/Skycore/releases/download/latest/skycore  --output-document=/home/core/skycore
                   ExecStartPost=/bin/sleep 2 ; /usr/bin/chmod +x /home/core/skycore
    - path: /run/setup-environment.sh
      permissions: '0755'
      content: |
        #!/bin/bash

        #mdadm --stop /dev/md0

        ENV="/etc/environment"

        # Test for RW access to $1
        touch $ENV
        if [ $? -ne 0 ]; then
            echo exiting, unable to modify: $ENV
            exit 1
        fi

        # Setup environment target
        sed -i -e '/^COREOS_PUBLIC_IPV4=/d' \
            -e '/^COREOS_PRIVATE_IPV4=/d' \
            "${ENV}"

        # We spin loop until the the IP addresses are set
        function get_ip () {
            IF=$1
            IP=
            while [ 1 ]; do
                IP=$(ifconfig $IF | awk '/inet / {print $2}')
                if [ "$IP" != "" ]; then
                    break
                fi
                sleep .1
            done
            echo $IP  
        }

        function get_mac () {
            IF=$1
            MAC=
            while [ 1 ]; do
                MAC=$(ifconfig $IF | awk '/ether / {print $2}')
                if [ "$MAC" != "" ]; then
                    break
                fi
                sleep .1
            done
            echo $MAC  
        }

        # Echo results of IP queries to environment file as soon as network interfaces 
        # get assigned IPs
        COREOS_PUBLIC_IPV4=$(get_ip %network_interface%)
        COREOS_PRIVATE_IPV4=$(get_ip %network_interface%)
        echo COREOS_PUBLIC_IPV4=${COREOS_PUBLIC_IPV4} >> $ENV # Also assigned to same IP
        echo COREOS_PRIVATE_IPV4=${COREOS_PRIVATE_IPV4} >> $ENV #eno1 should be changed to your device name

        ETCD_NAME=node_$(get_mac %network_interface%)
        echo ETCD_NAME=${ETCD_NAME} >> $ENV
        #sed 's/\$ETCD_NAME/'${ETCD_NAME}'/g' /run/cloud-config.yaml > /tmp/cconfigtmp
        #mv /tmp/cconfigtmp /run/cloud-config.yaml
        sed -i 's/\$ETCD_NAME/'${ETCD_NAME}'/g' /run/cloud-config.yaml

        #fleet metadata:
        VERSION_ID=`grep VERSION_ID /etc/os-release | grep -o '[0-9]*\.[0-9]*\.[0-9]*'`
        RAM_GB=`awk '/MemTotal/ {printf( "%.0f\n", $2 / (1024*1024) )}' /proc/meminfo`
        CORES=`nproc --all`
        mkdir -p /etc/fleet/        
        export METADATA="HOSTNAME=${HOSTNAME},ETCD_NAME=${ETCD_NAME},RAM_GB=${RAM_GB},CORES=${CORES},CoreOS=${VERSION_ID}"
        sed -i 's/\$METADATA/'${METADATA}'/g' /run/cloud-config.yaml
        
        #fleet config
        echo "metatadata=\"METADATA=${METADATA}\"" >> /etc/fleet/fleet.conf
        echo "etcd_request_timeout=3.0" >> /etc/fleet/fleet.conf
        echo "agent_ttl=\"300s\"" >> /etc/fleet/fleet.conf
        
        # md0 or md127
        export RAID_DEVICE=`cat /proc/mdstat | grep active | cut -f 1 -d ' '`

        sed -i 's/\${RAID_DEVICE}/'${RAID_DEVICE}'/g' /run/cloud-config.yaml

        # wait for array partitions
        if [ ! -e /dev/${RAID_DEVICE}p1 ] ; then sleep 3; echo 'Waiting for /dev/${RAID_DEVICE}p1'; fi
        if [ ! -e /dev/${RAID_DEVICE}p2 ] ; then sleep 3; echo 'Waiting for /dev/${RAID_DEVICE}p2'; fi
        if [ ! -e /dev/${RAID_DEVICE}p1 ] ; then echo "/dev/${RAID_DEVICE}p1 not found, exit script" ; exit ; fi

        # wipe filesystem if mount fails or "keep_filesystem" does not exist
        WIPE_FS=0
        mkdir -p /media/ephemeral/
         # try to mount
        /usr/bin/mount -t btrfs /dev/${RAID_DEVICE}p2 /media/ephemeral/
        if [ $? -eq 0 ]; then
            WIPE_FS=1
        fi
        if [ ! -e  /media/ephemeral/keep_filesystem ] ; then
            WIPE_FS=1
            /usr/bin/umount /media/ephemeral/
        fi
        
        if [ ${WIPE_FS} -eq 1 ] ; then
            echo "creating file systems"
            /usr/sbin/wipefs -f /dev/${RAID_DEVICE}p1
            /usr/sbin/wipefs -f /dev/${RAID_DEVICE}p2
            
            /usr/sbin/mkswap /dev/${RAID_DEVICE}p1
            /usr/sbin/mkfs.btrfs -f /dev/${RAID_DEVICE}p2
            
            
            /usr/bin/mount -t btrfs /dev/${RAID_DEVICE}p2 /media/ephemeral/
            if [ $? -eq 0 ]; then
                # mounted
                echo "delete this file to wipe filesystem on next boot" > /media/ephemeral/keep_filesystem
            else    
                echo "Error: Could not create filesystem"
            fi
        fi


    - path: /run/prep-cloud-config.sh
      permissions: '0755'
      content: |
        #!/bin/bash
        
        sed 's/\$_private/$private/g' /run/cloud-config.yaml > /tmp/cconfigtmp
        sed -i 's/\$_public/$public/g'  /tmp/cconfigtmp
        
        mv /tmp/cconfigtmp /run/cloud-config.yaml
    - path: /home/core/.toolboxrc
      owner: core
      content: |
        TOOLBOX_DOCKER_IMAGE=ubuntu
        TOOLBOX_DOCKER_TAG=latest
        TOOLBOX_USER=root
        TOOLBOX_DIRECTORY=/media/ephemeral/toolbox
    - path: /home/core/.ssh/mgrast_coreos.pem
      permissions: 0644
      content: |
%config_private_ssh_key%
    - path: /etc/ssh/mgrast_coreos.pem
      permissions: 0600
      content: |
%config_private_ssh_key%
    - path: /etc/profile.d/skycore.sh
      permissions: 0644
      content: |
        #!/bin/bash
        export SKYCORE_SHOCK=shock.metagenomics.anl.gov
    - path: /etc/motd.d/federal.conf
      permissions: 0644
      content: |
        -----------------------------------------------------------------------------
        
                                   Notice to Users
        
        This is a Federal computer system and is the property of the United States
        Government. It is for authorized use only. Users (authorized or unauthorized)
        have no explicit or implicit expectation of privacy.
        
        Any or all uses of this system and all files on this system may be intercepted,
        monitored, recorded, copied, audited, inspected, and disclosed to authorized
        site, Department of Energy, and law enforcement personnel, as well as
        authorized officials of other agencies, both domestic and foreign. By using
        this system, the user consents to such interception, monitoring, recording,
        copying, auditing, inspection, and disclosure at the discretion of authorized
        site or Department of Energy personnel.
        
        Unauthorized or improper use of this system may result in administrative
        disciplinary action and civil and criminal penalties. By continuing to use
        this system you indicate your awareness of and consent to these terms and
        conditions of use. LOG OFF IMMEDIATELY if you do not agree to the conditions
        stated in this warning.
        
        -----------------------------------------------------------------------------
    - path: /etc/systemd/journald.conf 
      permissions: 0644 
      content: | 
        [Journal] 
        SystemMaxUse=20M 
        RuntimeMaxUse=20M
# This is the first stage
coreos:
  units:
    - name: setup-environment.service
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Setup environment with private (and public) IP addresses

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/run/setup-environment.sh
    - name: prep-cloud-config.service
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Re-write variables in cloud-config for proper expansion.
        Requires=setup-environment.service
        After=setup-environment.service
        #Requires=user-cloudinit-proc-cmdline.service
        #After=user-cloudinit-proc-cmdline.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/run/prep-cloud-config.sh
    - name: second-stage-cloudinit.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Run coreos-cloudinit with actual cloud-config after environment has been set up
        #Requires=setup-environment.service
        #After=setup-environment.service
        Requires=prep-cloud-config.service
        After=prep-cloud-config.service
        #Requires=user-cloudinit-proc-cmdline.service
        #After=user-cloudinit-proc-cmdline.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        EnvironmentFile=/etc/environment
        ExecStart=/usr/bin/coreos-cloudinit --from-file=/run/cloud-config.yaml

