#cloud-config


# This is only a template. Use update_cloud_config_pxe.sh to create the actual config file from this template. This template
# requires ssh_authorized_keys , discovery_token and name of the network interface.

# This is a two-stage config. The first stage extracts private and public IP address from ifconfig command and writes it to /etc/environment, 
# the second stage does the usual cloud config stuff.
# Initial version was from https://github.com/coreos/coreos-cloudinit/issues/205#ref-issue-45810587


ssh_authorized_keys:
%ssh_authorized_keys%

write_files:
    - path: /run/cloud-config.yml
      permissions: '0644'
      content: |
        #cloud-config
        # This is the second stage
        coreos:
            update:
                reboot-strategy: off
            etcd:
                # name this is required because pxe-booting would create new ETCD instance names on boot.
                name: $ETCD_NAME
                # generate a new token for each unique cluster from https://discovery.etcd.io/new
                discovery: https://discovery.etcd.io/%discovery_token%
                # multi-region and multi-cloud deployments need to use $public_ipv4
                addr: $_public_ipv4:4001
                peer-addr: $_private_ipv4:7001
            fleet:
                public-ip: $_public_ipv4
                # etcd-request-timeout: 15
                metadata: $METADATA
            units:
                - name: settimezone.service
                  command: start
                  content: |
                    [Unit]
                    Description=Set the timezone
                    [Service]
                    ExecStart=/usr/bin/timedatectl set-timezone America/Chicago
                    RemainAfterExit=yes
                    Type=oneshot
                - name: format-swap.service
                  command: start
                  content: |
                    [Unit]
                    Description=Activates swap partition
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    ExecStart=/usr/sbin/swapon /dev/md0p1
                - name: create_docker_directories.service
                  command: start
                  content: |
                    [Unit]
                    Description=Create docker directories on /media/ephemeral
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    ExecStart=/usr/bin/mkdir -p /media/ephemeral/docker/ /media/ephemeral/tmp/
                    ExecStart=/usr/bin/chmod 1777 /media/ephemeral/tmp/
                - name: create_tmp.service
                  command: start
                  content: |
                    [Unit]
                    Description=Create /media/ephemeral/tmp/
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    ExecStart=/usr/bin/umount /tmp
                    ExecStart=/usr/bin/rm -rf /tmp/
                    ExecStart=/usr/bin/ln -s /media/ephemeral/tmp/ /tmp
                - name: docker.service
                  drop-ins:
                    - name: 50-docker-location.conf
                      content: |
                        [Unit]
                        Requires=create_docker_directories.service
                        After=create_docker_directories.service
                        [Service]
                        Environment='TMPDIR=/media/ephemeral/tmp/'
                        Environment='DOCKER_OPTS="-g=/media/ephemeral/docker"'
                - name: etcd.service
                  command: start
                - name: fleet.service
                  command: start
                - name: skycore.service
                  command: start
                  content: |
                   [Unit]
                   Description=skycore binary

                   [Service]
                   Type=oneshot
                   PreExecStart=-/usr/bin/rm -f /home/core/skycore
                   ExecStart=/usr/bin/wget --tries=10 --wait=3 --random-wait --retry-connrefused https://github.com/wgerlach/Skycore/releases/download/latest/skycore  --output-document=/home/core/skycore
                   ExecStart=/usr/bin/chmod +x /home/core/skycore
    - path: /run/setup-environment.sh
      permissions: '0755'
      content: |
        #!/bin/bash

        #mdadm --stop /dev/md0

        ENV="/etc/environment"

        # Test for RW access to $1
        touch $ENV
        if [ $? -ne 0 ]; then
            echo exiting, unable to modify: $ENV
            exit 1
        fi

        # Setup environment target
        sed -i -e '/^COREOS_PUBLIC_IPV4=/d' \
            -e '/^COREOS_PRIVATE_IPV4=/d' \
            "${ENV}"

        # We spin loop until the the IP addresses are set
        function get_ip () {
            IF=$1
            IP=
            while [ 1 ]; do
                IP=$(ifconfig $IF | awk '/inet / {print $2}')
                if [ "$IP" != "" ]; then
                    break
                fi
                sleep .1
            done
            echo $IP  
        }

        function get_mac () {
            IF=$1
            MAC=
            while [ 1 ]; do
                MAC=$(ifconfig $IF | awk '/ether / {print $2}')
                if [ "$MAC" != "" ]; then
                    break
                fi
                sleep .1
            done
            echo $MAC  
        }

        # Echo results of IP queries to environment file as soon as network interfaces 
        # get assigned IPs
        COREOS_PUBLIC_IPV4=$(get_ip %network_interface%)
        COREOS_PRIVATE_IPV4=$(get_ip %network_interface%)
        echo COREOS_PUBLIC_IPV4=${COREOS_PUBLIC_IPV4} >> $ENV # Also assigned to same IP
        echo COREOS_PRIVATE_IPV4=${COREOS_PRIVATE_IPV4} >> $ENV #eno1 should be changed to your device name

        ETCD_NAME=node_$(get_mac %network_interface%)
        echo ETCD_NAME=${ETCD_NAME} >> $ENV
        #sed 's/\$ETCD_NAME/'${ETCD_NAME}'/g' /run/cloud-config.yml > /tmp/cconfigtmp
        #mv /tmp/cconfigtmp /run/cloud-config.yml
        sed -i 's/\$ETCD_NAME/'${ETCD_NAME}'/g' /run/cloud-config.yml

        #fleet metadata:
        RAM_GB=`awk '/MemTotal/ {printf( "%.0f\n", $2 / (1024*1024) )}' /proc/meminfo`
        CORES=`nproc --all`
        mkdir -p /etc/fleet/        
        export METADATA="HOSTNAME=${HOSTNAME},ETCD_NAME=${ETCD_NAME},RAM_GB=${RAM_GB},CORES=${CORES}"
        echo metatadata=\"METADATA=${METADATA}\" >> /etc/fleet/fleet.conf
        sed -i 's/\$METADATA/'${METADATA}'/g' /run/cloud-config.yml
        

        # wait for array partitions

        if [ ! -e /dev/md0p1 ] ; then sleep 3; echo 'Waiting for /dev/md0p1'; fi
        if [ ! -e /dev/md0p2 ] ; then sleep 3; echo 'Waiting for /dev/md0p2'; fi

        if [ ! -e /dev/md0p1 ] ; then echo "/dev/md0p1 not found, exit script" ; exit ; fi


        # wipe filesystem if mount fails or "keep_filesystem" does not exist
        WIPE_FS=0
        mkdir -p /media/ephemeral/
         # try to mount
        /usr/bin/mount -t btrfs /dev/md0p2 /media/ephemeral/
        if [ $? -eq 0 ]; then
            WIPE_FS=1
        fi
        if [ ! -e  /media/ephemeral/keep_filesystem ] ; then
            WIPE_FS=1
            /usr/bin/umount /media/ephemeral/
        fi
        
        if [ ${WIPE_FS} -eq 1 ] ; then
            echo "creating file systems"
            /usr/sbin/wipefs -f /dev/md0p1
            /usr/sbin/wipefs -f /dev/md0p2
            
            /usr/sbin/mkswap /dev/md0p1
            /usr/sbin/mkfs.btrfs -f /dev/md0p2
            
            
            /usr/bin/mount -t btrfs /dev/md0p2 /media/ephemeral/
            if [ $? -eq 0 ]; then
                # mounted
                echo "delete this file to wipe filesystem on next boot" > /media/ephemeral/keep_filesystem
            else    
                echo "Error: Could not create filesystem"
            fi
        fi


    - path: /run/prep-cloud-config.sh
      permissions: '0755'
      content: |
        #!/bin/bash
        
        sed 's/\$_private/$private/g' /run/cloud-config.yml > /tmp/cconfigtmp
        sed -i 's/\$_public/$public/g' /tmp/cconfigtmp
        
        mv /tmp/cconfigtmp /run/cloud-config.yml
#    - path: /etc/resolv.conf
#      permissions: 0644
#      owner: root
#      content: |
#        nameserver 192.168.1.1
#        nameserver 8.8.8.8
#        nameserver 8.8.4.4
#        domain somedomain.local
#hostname: coreos001
#manage_etc_hosts: localhost
# This is the first stage
coreos:
  units:
    - name: setup-environment.service
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Setup environment with private (and public) IP addresses

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/run/setup-environment.sh
    - name: prep-cloud-config.service
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Re-write variables in cloud-config for proper expansion.
        Requires=setup-environment.service
        After=setup-environment.service
        #Requires=user-cloudinit-proc-cmdline.service
        #After=user-cloudinit-proc-cmdline.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/run/prep-cloud-config.sh
    - name: second-stage-cloudinit.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Run coreos-cloudinit with actual cloud-config after environment has been set up
        #Requires=setup-environment.service
        #After=setup-environment.service
        Requires=prep-cloud-config.service
        After=prep-cloud-config.service
        #Requires=user-cloudinit-proc-cmdline.service
        #After=user-cloudinit-proc-cmdline.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        EnvironmentFile=/etc/environment
        ExecStart=/usr/bin/coreos-cloudinit --from-file=/run/cloud-config.yml

