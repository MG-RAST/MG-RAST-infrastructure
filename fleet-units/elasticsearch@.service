[Unit]
Description=MG-RAST Elasticsearch %i
After=docker.service
Requires=docker.service
Wants=elasticsearch-discovery@%i.service

[Service]
Environment='SERVICE=elasticsearch'
Environment='CONTAINER=elasticsearch'
Environment='SERVICE_DIR=/media/ephemeral/elasticsearch'
Environment='IMAGE=elasticsearch:5.0.0-rc1'


TimeoutStartSec=0
Restart=always
RestartSec=10
EnvironmentFile=-/etc/environment


# get config
ExecStartPre=/bin/bash -c 'mkdir -p ~/.ssh/; if [ `ssh-keygen -F gitlab.cels.anl.gov | grep -v "^#" | wc -l` -eq "0" ]; then ssh-keyscan -H gitlab.cels.anl.gov >> ~/.ssh/known_hosts; fi'
ExecStartPre=/bin/bash -c 'eval $(ssh-agent); ssh-add /etc/ssh/mgrast_coreos.pem; rm -rf ${SERVICE_DIR}/mgrast-config; mkdir -p ${SERVICE_DIR}; cd ${SERVICE_DIR}; git clone git@gitlab.cels.anl.gov:MG-RAST/mgrast-config.git'


# get image
ExecStartPre=/bin/bash -c "docker pull ${IMAGE}"

# create cluster if it does not exist.
# if cluster exists, continue
# if cluster does not exist, wait until enough nodes show up
ExecStartPre=/bin/bash -c "export NODE_NAME=%p-%i ; ${SERVICE_DIR}/mgrast-config/service/${SERVICE}/init_cluster.sh"


ExecStart=/bin/bash -c "CLUSTER_INIT_NODES=$(etcdctl get /services/${SERVICE}/cluster_init_nodes); \
  if [ -z ${CLUSTER_INIT_NODES} ] ; then \
    NODES=${CLUSTER_INIT_NODES} ; \
  else \
    echo 'CLUSTER_INIT_NODES is not defined' ; \
    NODES=$(for i in $(etcdctl ls /services/${SERVICE}/instances/) ; do etcdctl get $i ; done | tr \"\n\" \",\" |  sed 's/.$//') ; \
  fi ;\
  echo NODES=${NODES} ; \
  if [ -z ${CLUSTER_INIT_NODES} ] ; then echo 'NODES empty' ; exit 1 ; done ; \
  docker run -ti --rm --name ${CONTAINER} -p 9200:9200 -p 9300:9300 ${IMAGE} -E node.name=\"%p-%i\" -E cluster.name=\"mgrast\" -E discovery.zen.minimum_master_nodes=3"


[X-Fleet] 	
Conflicts=elasticsearch@*.service