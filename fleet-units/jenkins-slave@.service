[Unit]
Description=Jenkins slave
After=docker.service
Requires=docker.service
#Wants=%p-discovery@%i.service

[Service]
Environment='IMAGE=jenkins/ssh-slave:latest'
Environment='SERVICE=jenkins'
Environment='SERVICE_DIR=/media/ephemeral/%p/%i'
Environment='CONTAINER=jenkins-slave-%i'


Restart=always
TimeoutStartSec=0

EnvironmentFile=-/etc/environment
ExecStartPre=-/bin/bash -c "/usr/bin/docker kill ${CONTAINER} > /dev/null 2>&1"
ExecStartPre=-/bin/bash -c "/usr/bin/docker rm ${CONTAINER} > /dev/null 2>&1"

# get config
ExecStartPre=/bin/bash -c 'mkdir -p ~/.ssh/ ; if [ `ssh-keygen -F github.com | grep -v "^#" | wc -l` -eq "0" ]; then ssh-keyscan -H github.com >> ~/.ssh/known_hosts ; fi'
ExecStartPre=/bin/bash -c 'rm -rf ${SERVICE_DIR}/mgconf ; mkdir -p ${SERVICE_DIR} ; cd ${SERVICE_DIR} ; GIT_SSH_COMMAND="ssh -i /etc/ssh/mgrast_coreos.pem" git clone git@github.com:MG-RAST/mgconf.git'



# set iptables rules
ExecStartPre=/bin/bash -c 'if [ $(iptables -L | grep jenkins | wc -l) == 0 ] ; then iptables -A INPUT -p tcp -s 140.221.76.71 --dport 8002 -j ACCEPT -m comment --comment "jenkins" ; fi'

# get image
ExecStartPre=/usr/bin/docker pull ${IMAGE}

# get docker binary
ExecStartPre=/bin/bash -c 'cd ${SERVICE_DIR}/mgconf/services/${SERVICE}/ ; ./get_docker_binary.sh'


ExecStart=/usr/bin/docker run --rm --name ${CONTAINER} -p 8002:22 --env-file ${SERVICE_DIR}/mgconf/services/${SERVICE}/slave.env -v /var/run/docker.sock:/var/run/docker.sock -v ${SERVICE_DIR}/mgconf/services/${SERVICE}/docker:/usr/bin/docker ${IMAGE}


ExecStop=-/bin/bash -c "/usr/bin/docker stop ${CONTAINER} > /dev/null 2>&1"
ExecStop=-/bin/rm -rf ${SERVICE_DIR}

[X-Fleet]
Conflicts=jenkins-slave@*.service